@model EasyBilling.Models.Products_For_Sale
<html>
<head>
    <link rel="stylesheet" href="//cdn.datatables.net/1.10.19/css/jquery.dataTables.min.css" />


    <script src="//cdn.datatables.net/1.10.19/js/jquery.dataTables.js"></script>
    <script>
jQuery(document).ready(function ($) {
            var employeeTable = $('#employeeTable').DataTable({
                ajax: {
                    url: "/api/stocksitms",
                    dataSrc: '',
                },
                columns: [

                     { data: 'Date' },
                     { data: 'Tyre_make' },
                     { data: 'Tyre_type' },
                     { data: 'Product_name' },
                       { data: 'Tyre_Size' },
                           { data: 'Supplier_name' },
                           { data: 'Pieces' },
                           { data: 'Approve' },
                    //{
                    //    data: '', "defaultContent":
                    //    //'<button type="button" ' +
                    //    //    'class="btn btn-primary pull-left edit" aria-label="Left Align" title="Edit">' +
                    //    //    '<span class="glyphicon glyphicon-pencil" aria-hidden="true"></span>' +
                    //    //    '</button> ' +
                    //      '<button type="button" ' +
                    //        'class="btn btn-danger pull-right delete" aria-label="Delete" title="Delete"> ' +
                    //        '<span class="glyphicon glyphicon-remove" aria-hidden="true"></span>' +
                    //        '</button> '
                    //}
                ]
            });
            var editEmployee = function (e) {
                var isEdit = e.type === 'dblclick';
                var rowData = isEdit ? employeeTable.row($(this)).data() :
                    employeeTable.row($(this).closest('tr')[0]).data();
                if (isEdit || $(this).hasClass('edit')) {
                    $('#employeeFormModal').modal();
                    for (var key in rowData) {
                        var value = key.indexOf('date') != -1 ? new Date(rowData[key]).toISOString().split('T')[0] :
                            rowData[key];
                        $('#employeeFormModal').find('#' + key).val(value);
                    }
                } else if ($(this).hasClass('delete')) {
                    $('#confirmEmployeeDeleteModal').modal();
                    $('#confirmEmployeeDeleteModal').find('input.Token_Number').val(rowData.Token_Number);
                }
            };
            var resetModal = function (e) {
                $('#employeeFormModal').find('input').val('');

                $('#employeeFormModal').find('.modal-footer .alertnotsaved').hide();
                $('#employeeFormModal').find('.modal-footer .alert').hide();
            }
            var saveEmployee = function (e) {
                var alertEl = $('#employeeFormModal').find('.modal-footer .alert');
                var alertElnot = $('#employeeFormModal').find('.modal-footer .alertnotsaved');

                var isDelete = this.id == 'deleteEmployee';
                var formData = {};
                var data = $('#employeeForm').serializeArray();
                var url = !isDelete ? '/api/stocksitms' : '/api/stocksitms/' + $('#confirmEmployeeDeleteModal').find('input.Token_Number').val();
                var type = isDelete ? 'DELETE' : 'PUT'

                $.each(data, function (i, v) {

                    formData[v.name] = v.value;
                });

                $.ajax({
                    url: url, data: JSON.stringify(formData),
                    contentType: 'application/json', type: type,
                    success: function () {
                        employeeTable.ajax.reload();
                        $('#employeeFormModal').find('.modal-footer .alertnotsaved').hide();
                        alertEl.show();
                        setTimeout(function () {
                            $('#employeeFormModal').find('.modal-footer .alert').hide();
                            $('#employeeFormModal').modal('hide');

                        }, 2000);
                        $('#employeeFormModal').find('input').val('');

                    }, error: function (xhr, errorType, exception) {
                        var responseText;
                        var txtend = ".";
                        responseText = jQuery.parseJSON(xhr.responseText);
                        alert(responseText.Message);
                        //$('#employeeFormModal').find('.modal-footer .alertnotsaved').find('label#err').text(responseText.Message);
                        alertElnot.show();
                    }
                });
            }

            $('#employeeTable tbody').on('click', 'tr td button.btn', editEmployee);
            $('#employeeTable tbody').on('dblclick', 'tr', editEmployee);
            $('#employeeFormModal').on('hidden.bs.modal', resetModal);
            $('body').on('click', '#deleteEmployee', saveEmployee);
            $('body').on('click', '#employeeFormSubmit', saveEmployee);
        });</script>
    <style>

        .employeeTableWrap {
            padding-right: 10px !important;
            padding-left: 10px !important;
            margin-right: auto;
            margin-left: auto;
        }

        .no-padding {
            padding: 0 !important;
        }

        .no-margin {
            margin: 0 !important;
        }
    </style>
</head>
<body>
    <div class="container-fluid employeeTableWrap">
        <div class="panel panel-default no-padding">
            <div class="panel-heading clearfix">
                <h3 class="pull-left">Stock entry</h3>
                <button type="button" class="btn btn-success pull-right" title="Add vehicle"
                        data-toggle="modal" data-target="#employeeFormModal">
                    Add stock  &nbsp;
                    <span class="glyphicon glyphicon-plus" aria-hidden="true"></span>
                </button>
            </div>
            <div class="panel-body">
                <div class="employeeTable">
                    <table id="employeeTable" class="display cell-border order-column">
                        <thead>

                            <tr>


                                <th>Date of stock entry</th>
                                <th>Tyre make</th>
                                <th>Tyre type</th>
                                <th>Company name</th>
                                <th>Tyre sizes</th>

                                <th>Supplier</th>
                                <th>No of pieces</th>

                                <th>Current State</th>
                                @*<th></th>*@
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="employeeFormModal" tabindex="-1" role="dialog" aria-labelledby="employeeFormModalLabel">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="myModalLabel">Add stock</h4>
                </div>
                <div class="modal-body container-fluid">
                    <div class="row">
                        <form id="employeeForm" name="employeeForm">
                            <input type="hidden" id="Token_Number" name="Token_Number" />

                            <div class="form-group col-xs-10 col-sm-6 col-md-6 col-lg-6">
                                <label for="message-text" class="control-label">Bill number:</label>
                                @Html.EditorFor(model => model.Purchase_number, new { htmlAttributes = new { @class = "form-control", @id = "Purchase_number", @name = "Purchase_number" } })

                            </div>
                            <div class="form-group col-xs-10 col-sm-6 col-md-6 col-lg-6">
                                <label for="message-text" class="control-label">Bill date:</label>
                                @Html.EditorFor(model => model.PurchaseDate, new { htmlAttributes = new { @class = "form-control ", @type = "date" } })


                            </div>
                            <div class="form-group col-xs-10 col-sm-6 col-md-6 col-lg-6">
                                <label for="message-text" class="control-label">Delivery ph. number:</label>

                                @Html.EditorFor(model => model.Delivery_contact_number, new { htmlAttributes = new { @class = "form-control ", @type = "number" } })

                                @*<input type="text" class="form-control" id="Delivery_contact_number" name="Delivery_contact_number" />*@
                            </div>
                            <div class="form-group col-xs-10 col-sm-6 col-md-6 col-lg-6">
                                <label for="message-text" class="control-label">Delivery address:</label>
                                @Html.TextAreaFor(model => model.Delivery_address, new { @class = "form-control " })

                                @*<input type="text" class="form-control" id="Product_type" name="Product_type" /> *@
                            </div>
                            <div class="form-group col-xs-10 col-sm-6 col-md-6 col-lg-6">
                                <label for="message-text" class="control-label">Item Id:</label>
                                @Html.DropDownListFor(model => model.Item_tyre_token, new SelectList(@ViewBag.itmtyres, "Token_number", "Item_Id"),
                                                    "Select Item Id", new { @class = "form-control pp" })


                            </div>
                            <div class="form-group col-xs-10 col-sm-6 col-md-6 col-lg-6">
                                <label for="message-text" class="control-label">Tyre make:</label>
                                @*@Html.DropDownListFor(model => model.Tyre_make, new List<SelectListItem> {new SelectListItem { Value = "Old" , Text = "Old" },
        new SelectListItem { Value = "New" , Text = "New" } },
                                                         "Select tyre make", new { @class = "form-control TM" })*@
                                @Html.EditorFor(model => model.Tyre_make, new { htmlAttributes = new { @class = "form-control TM" } })
                            </div>
                            <div class="form-group col-xs-10 col-sm-6 col-md-6 col-lg-6">
                                <label for="message-text" class="control-label">Tyre type:</label>
                                @*@Html.DropDownListFor(model => model.Tyre_type, new List<SelectListItem> {new SelectListItem { Value = "Tube" , Text = "Tube" },
new SelectListItem { Value = "Tubeless" , Text = "Tubeless" } },
                                                  "Select tyre type", new { @class = "form-control TT" })*@
                                @Html.EditorFor(model => model.Tyre_type, new { htmlAttributes = new { @class = "form-control TT" } })

                            </div>
                            <div class="form-group col-xs-10 col-sm-6 col-md-6 col-lg-6">
                                <label for="message-text" class="control-label">Tyre feel:</label>
                                @*@Html.DropDownListFor(model => model.Tyre_feel, new List<SelectListItem> {new SelectListItem { Value = "Normal" , Text = "Normal" },
  new SelectListItem { Value = "Radial" , Text = "Radial" } },
                                                    "Select tyre feel", new { @class = "form-control TF" })*@
                                @Html.EditorFor(model => model.Tyre_feel, new { htmlAttributes = new { @class = "form-control TF" } })
                            </div>
                            <div class="form-group col-xs-10 col-sm-6 col-md-6 col-lg-6">
                                <label for="message-text" class="control-label">Company name:</label>
                                @*@Html.DropDownListFor(model => model.Product_Token, new SelectList(@ViewBag.prdct, "Token_Number", "Product_name"),
                                                     "Select company name", new { @class = "form-control COMP" })*@
                                @Html.EditorFor(model => model.Product_Token, new { htmlAttributes = new { @class = "form-control COMP" } })
                            </div>
                            <div class="form-group col-xs-10 col-sm-6 col-md-6 col-lg-6">
                                <label for="message-text" class="control-label">Tyre Size:</label>
                                @*@Html.DropDownListFor(model => model.Tyre_token, new SelectList(@ViewBag.tyresize, "Token_number", "Tyre_size1"),
                                                     "Select Tyre Size", new { @class = "form-control TS"})*@
                                @Html.EditorFor(model => model.Tyre_Size, new { htmlAttributes = new { @class = "form-control TS" } })
                            </div>
                            <div class="form-group col-xs-10 col-sm-6 col-md-6 col-lg-6">
                                <label for="message-text" class="control-label">Supplier name:</label>
                                @Html.DropDownListFor(model => model.Supplier_token, new SelectList(@ViewBag.dlr, "Token_number", "Name"),
                                                     "Select Supplier name", new { @class = "form-control" })

                            </div>
                            <div class="form-group col-xs-10 col-sm-6 col-md-6 col-lg-6">
                                <label for="message-text" class="control-label">Vehicle type:</label>
                                @*@Html.DropDownListFor(model => model.Vehicle_Token, new SelectList(@ViewBag.vehicletype, "Token_number", "Vehicle_type"),
                                                     "Select vehicle type", new { @class = "form-control VT"})*@

                                @Html.EditorFor(model => model.Vehicle_type, new { htmlAttributes = new { @class = "form-control VT" } })
                            </div>

                            <div class="form-group col-xs-10 col-sm-6 col-md-6 col-lg-6">
                                <label for="message-text" class="control-label">Purchase Price:</label>
                                @Html.EditorFor(model => model.Purchase_Price, new { htmlAttributes = new { @class = "form-control nm" } })

                            </div>
                            <div class="form-group col-xs-10 col-sm-6 col-md-6 col-lg-6">
                                <label for="message-text" class="control-label">SGST:</label>
                                @Html.EditorFor(model => model.SGST, new { htmlAttributes = new { @class = "form-control " } })

                            </div>
                            <div class="form-group col-xs-10 col-sm-6 col-md-6 col-lg-6">
                                <label for="message-text" class="control-label">CGST:</label>
                                @Html.EditorFor(model => model.CGST, new { htmlAttributes = new { @class = "form-control " } })

                            </div>
                            <div class="form-group col-xs-10 col-sm-6 col-md-6 col-lg-6">
                                <label for="message-text" class="control-label">Pieces:</label>
                                @Html.EditorFor(model => model.Pieces, new { htmlAttributes = new { @class = "form-control nm" } })

                            </div>
                            <div class="form-group col-xs-10 col-sm-6 col-md-6 col-lg-6">
                                <label for="message-text" class="control-label">Date:</label>
                                @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control nm", @type = "date" } })

                            </div>
                            <div class="form-group col-xs-10 col-sm-6 col-md-6 col-lg-6">
                                <label for="message-text" class="control-label">Description:</label>
                                @Html.TextAreaFor(model => model.Description, new { @class = "form-control ", @rows = "2" })

                            </div>

                        </form>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="alert alert-success pull-left no-margin" role="alert" style="display:none">
                        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                        <strong>Created!</strong> Stock created successfully.
                    </div>
                    <div class="alertnotsaved alert-danger pull-left no-margin" role="alert" style="display:none">
                        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                        <strong>Not created!</strong> Stock is not created.

                    </div>
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="employeeFormSubmit">Save</button>
                </div>
            </div>
        </div>
    </div>
    <div id="confirmEmployeeDeleteModal" class="modal fade">
        <div class="modal-dialog modal-sm" role="document">
            <div class="modal-content">
                <input type="hidden" name="Token_Number" class="Token_Number" />
                <div class="modal-body">
                    Are you sure?
                </div>
                <div class="modal-footer">
                    <button type="button" data-dismiss="modal" class="btn btn-danger" id="deleteEmployee">Delete</button>
                    <button type="button" data-dismiss="modal" class="btn">Cancel</button>
                </div>
            </div>
        </div>
    </div>
    <script type="text/javascript">
        //$('#employeeFormModal').find('input.pp')
        $('#employeeFormModal').find('.pp').on('change', function () {
            var prdcttkn = $('.pp').val();
            
            if (prdcttkn == "") {
                prdcttkn = "0000";
            }
            $.ajax
            ({
                type: 'GET',
                url: '@Url.Action("GetItemDetails")',
                dataType: 'json',
                data: { 'id': prdcttkn },

                success: function (data) {

                    $('#employeeFormModal').find('.TM').val(data.Tyre_make);
                    $('#employeeFormModal').find('.TT').val(data.Tyre_type);
                    $('#employeeFormModal').find('.TF').val(data.Tyre_feel);
                    $('#employeeFormModal').find('.COMP').val(data.Company_token);
                    $('#employeeFormModal').find('.TS').val(data.Tyre_size);
                    $('#employeeFormModal').find('.VT').val(data.Vehicle_type);

                },
                error: function (ex) {
                    $('#employeeFormModal').find('.TM').val('');
                    $('#employeeFormModal').find('.TT').val('');
                    $('#employeeFormModal').find('.TF').val('');
                    $('#employeeFormModal').find('.COMP').val('');
                    $('#employeeFormModal').find('.TS').val('');
                    $('#employeeFormModal').find('.VT').val('');
                    //var r = jQuery.parseJSON(response.responseText);
                    //alert("Message: " + r.Message);
                }
            });
            return false;
        });
    </script>

</body>
</html>
